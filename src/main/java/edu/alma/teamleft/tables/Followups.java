/*
 * This file is generated by jOOQ.
 */
package edu.alma.teamleft.tables;


import edu.alma.teamleft.Keys;
import edu.alma.teamleft.Public;
import edu.alma.teamleft.tables.records.FollowupsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Followups extends TableImpl<FollowupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.followups</code>
     */
    public static final Followups FOLLOWUPS = new Followups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FollowupsRecord> getRecordType() {
        return FollowupsRecord.class;
    }

    /**
     * The column <code>public.followups.followup_id</code>.
     */
    public final TableField<FollowupsRecord, Integer> FOLLOWUP_ID = createField(DSL.name("followup_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.followups.ticket_id</code>.
     */
    public final TableField<FollowupsRecord, Integer> TICKET_ID = createField(DSL.name("ticket_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.followups.followup_date</code>.
     */
    public final TableField<FollowupsRecord, LocalDateTime> FOLLOWUP_DATE = createField(DSL.name("followup_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.followups.followup_outcome</code>.
     */
    public final TableField<FollowupsRecord, String> FOLLOWUP_OUTCOME = createField(DSL.name("followup_outcome"), SQLDataType.VARCHAR(1500), this, "");

    private Followups(Name alias, Table<FollowupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Followups(Name alias, Table<FollowupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.followups</code> table reference
     */
    public Followups(String alias) {
        this(DSL.name(alias), FOLLOWUPS);
    }

    /**
     * Create an aliased <code>public.followups</code> table reference
     */
    public Followups(Name alias) {
        this(alias, FOLLOWUPS);
    }

    /**
     * Create a <code>public.followups</code> table reference
     */
    public Followups() {
        this(DSL.name("followups"), null);
    }

    public <O extends Record> Followups(Table<O> child, ForeignKey<O, FollowupsRecord> key) {
        super(child, key, FOLLOWUPS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FollowupsRecord, Integer> getIdentity() {
        return (Identity<FollowupsRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<UniqueKey<FollowupsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FOLLOWUPS_FOLLOWUP_ID_KEY);
    }

    @Override
    public List<ForeignKey<FollowupsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FOLLOWUPS__FOLLOWUPS_TICKET_ID_FKEY);
    }

    private transient Ticket _ticket;

    /**
     * Get the implicit join path to the <code>public.ticket</code> table.
     */
    public Ticket ticket() {
        if (_ticket == null)
            _ticket = new Ticket(this, Keys.FOLLOWUPS__FOLLOWUPS_TICKET_ID_FKEY);

        return _ticket;
    }

    @Override
    public Followups as(String alias) {
        return new Followups(DSL.name(alias), this);
    }

    @Override
    public Followups as(Name alias) {
        return new Followups(alias, this);
    }

    @Override
    public Followups as(Table<?> alias) {
        return new Followups(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Followups rename(String name) {
        return new Followups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Followups rename(Name name) {
        return new Followups(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Followups rename(Table<?> name) {
        return new Followups(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
