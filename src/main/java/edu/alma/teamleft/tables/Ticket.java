/*
 * This file is generated by jOOQ.
 */
package edu.alma.teamleft.tables;


import edu.alma.teamleft.Keys;
import edu.alma.teamleft.Public;
import edu.alma.teamleft.tables.records.TicketRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticket extends TableImpl<TicketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ticket</code>
     */
    public static final Ticket TICKET = new Ticket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketRecord> getRecordType() {
        return TicketRecord.class;
    }

    /**
     * The column <code>public.ticket.ticket_id</code>.
     */
    public final TableField<TicketRecord, Integer> TICKET_ID = createField(DSL.name("ticket_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ticket.subject</code>.
     */
    public final TableField<TicketRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.ticket.details</code>.
     */
    public final TableField<TicketRecord, String> DETAILS = createField(DSL.name("details"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.ticket.client_id</code>.
     */
    public final TableField<TicketRecord, Integer> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.ticket.creator_of_ticket</code>.
     */
    public final TableField<TicketRecord, Integer> CREATOR_OF_TICKET = createField(DSL.name("creator_of_ticket"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.ticket.entry_date</code>.
     */
    public final TableField<TicketRecord, LocalDateTime> ENTRY_DATE = createField(DSL.name("entry_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.ticket.call_date</code>.
     */
    public final TableField<TicketRecord, LocalDateTime> CALL_DATE = createField(DSL.name("call_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.ticket.status_id</code>.
     */
    public final TableField<TicketRecord, Integer> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.ticket.service_type_id</code>.
     */
    public final TableField<TicketRecord, Integer> SERVICE_TYPE_ID = createField(DSL.name("service_type_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.ticket.notes</code>.
     */
    public final TableField<TicketRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.VARCHAR(1000), this, "");

    private Ticket(Name alias, Table<TicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ticket(Name alias, Table<TicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ticket</code> table reference
     */
    public Ticket(String alias) {
        this(DSL.name(alias), TICKET);
    }

    /**
     * Create an aliased <code>public.ticket</code> table reference
     */
    public Ticket(Name alias) {
        this(alias, TICKET);
    }

    /**
     * Create a <code>public.ticket</code> table reference
     */
    public Ticket() {
        this(DSL.name("ticket"), null);
    }

    public <O extends Record> Ticket(Table<O> child, ForeignKey<O, TicketRecord> key) {
        super(child, key, TICKET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TicketRecord, Integer> getIdentity() {
        return (Identity<TicketRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<UniqueKey<TicketRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TICKET_TICKET_ID_KEY);
    }

    @Override
    public List<ForeignKey<TicketRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TICKET__TICKET_CLIENT_ID_FKEY, Keys.TICKET__TICKET_CREATOR_OF_TICKET_FKEY, Keys.TICKET__TICKET_STATUS_ID_FKEY, Keys.TICKET__TICKET_SERVICE_TYPE_ID_FKEY);
    }

    private transient Client _client;
    private transient Staff _staff;
    private transient Status _status;
    private transient Service _service;

    /**
     * Get the implicit join path to the <code>public.client</code> table.
     */
    public Client client() {
        if (_client == null)
            _client = new Client(this, Keys.TICKET__TICKET_CLIENT_ID_FKEY);

        return _client;
    }

    /**
     * Get the implicit join path to the <code>public.staff</code> table.
     */
    public Staff staff() {
        if (_staff == null)
            _staff = new Staff(this, Keys.TICKET__TICKET_CREATOR_OF_TICKET_FKEY);

        return _staff;
    }

    /**
     * Get the implicit join path to the <code>public.status</code> table.
     */
    public Status status() {
        if (_status == null)
            _status = new Status(this, Keys.TICKET__TICKET_STATUS_ID_FKEY);

        return _status;
    }

    /**
     * Get the implicit join path to the <code>public.service</code> table.
     */
    public Service service() {
        if (_service == null)
            _service = new Service(this, Keys.TICKET__TICKET_SERVICE_TYPE_ID_FKEY);

        return _service;
    }

    @Override
    public Ticket as(String alias) {
        return new Ticket(DSL.name(alias), this);
    }

    @Override
    public Ticket as(Name alias) {
        return new Ticket(alias, this);
    }

    @Override
    public Ticket as(Table<?> alias) {
        return new Ticket(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(String name) {
        return new Ticket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Name name) {
        return new Ticket(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Table<?> name) {
        return new Ticket(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, Integer, LocalDateTime, LocalDateTime, Integer, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
