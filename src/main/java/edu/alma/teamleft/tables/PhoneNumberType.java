/*
 * This file is generated by jOOQ.
 */
package edu.alma.teamleft.tables;


import edu.alma.teamleft.Keys;
import edu.alma.teamleft.Public;
import edu.alma.teamleft.tables.records.PhoneNumberTypeRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PhoneNumberType extends TableImpl<PhoneNumberTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.phone_number_type</code>
     */
    public static final PhoneNumberType PHONE_NUMBER_TYPE = new PhoneNumberType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhoneNumberTypeRecord> getRecordType() {
        return PhoneNumberTypeRecord.class;
    }

    /**
     * The column <code>public.phone_number_type.number_type_id</code>.
     */
    public final TableField<PhoneNumberTypeRecord, Integer> NUMBER_TYPE_ID = createField(DSL.name("number_type_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.phone_number_type.number_type</code>.
     */
    public final TableField<PhoneNumberTypeRecord, String> NUMBER_TYPE = createField(DSL.name("number_type"), SQLDataType.VARCHAR(10), this, "");

    private PhoneNumberType(Name alias, Table<PhoneNumberTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private PhoneNumberType(Name alias, Table<PhoneNumberTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.phone_number_type</code> table reference
     */
    public PhoneNumberType(String alias) {
        this(DSL.name(alias), PHONE_NUMBER_TYPE);
    }

    /**
     * Create an aliased <code>public.phone_number_type</code> table reference
     */
    public PhoneNumberType(Name alias) {
        this(alias, PHONE_NUMBER_TYPE);
    }

    /**
     * Create a <code>public.phone_number_type</code> table reference
     */
    public PhoneNumberType() {
        this(DSL.name("phone_number_type"), null);
    }

    public <O extends Record> PhoneNumberType(Table<O> child, ForeignKey<O, PhoneNumberTypeRecord> key) {
        super(child, key, PHONE_NUMBER_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PhoneNumberTypeRecord, Integer> getIdentity() {
        return (Identity<PhoneNumberTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<UniqueKey<PhoneNumberTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PHONE_NUMBER_TYPES_ID_KEY);
    }

    @Override
    public PhoneNumberType as(String alias) {
        return new PhoneNumberType(DSL.name(alias), this);
    }

    @Override
    public PhoneNumberType as(Name alias) {
        return new PhoneNumberType(alias, this);
    }

    @Override
    public PhoneNumberType as(Table<?> alias) {
        return new PhoneNumberType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PhoneNumberType rename(String name) {
        return new PhoneNumberType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PhoneNumberType rename(Name name) {
        return new PhoneNumberType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PhoneNumberType rename(Table<?> name) {
        return new PhoneNumberType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
