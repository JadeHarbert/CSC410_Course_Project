/*
 * This file is generated by jOOQ.
 */
package edu.alma.teamleft;


import edu.alma.teamleft.tables.Address;
import edu.alma.teamleft.tables.AddressType;
import edu.alma.teamleft.tables.Client;
import edu.alma.teamleft.tables.County;
import edu.alma.teamleft.tables.Followups;
import edu.alma.teamleft.tables.PhoneNumber;
import edu.alma.teamleft.tables.PhoneNumberType;
import edu.alma.teamleft.tables.PreferredContact;
import edu.alma.teamleft.tables.Service;
import edu.alma.teamleft.tables.Staff;
import edu.alma.teamleft.tables.Status;
import edu.alma.teamleft.tables.Ticket;
import edu.alma.teamleft.tables.records.AddressRecord;
import edu.alma.teamleft.tables.records.AddressTypeRecord;
import edu.alma.teamleft.tables.records.ClientRecord;
import edu.alma.teamleft.tables.records.CountyRecord;
import edu.alma.teamleft.tables.records.FollowupsRecord;
import edu.alma.teamleft.tables.records.PhoneNumberRecord;
import edu.alma.teamleft.tables.records.PhoneNumberTypeRecord;
import edu.alma.teamleft.tables.records.PreferredContactRecord;
import edu.alma.teamleft.tables.records.ServiceRecord;
import edu.alma.teamleft.tables.records.StaffRecord;
import edu.alma.teamleft.tables.records.StatusRecord;
import edu.alma.teamleft.tables.records.TicketRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressRecord> ADDRESSES_ADDRESS_ID_KEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("addresses_address_id_key"), new TableField[] { Address.ADDRESS.ADDRESS_ID }, true);
    public static final UniqueKey<AddressTypeRecord> ADDRESS_TYPES_ID_KEY = Internal.createUniqueKey(AddressType.ADDRESS_TYPE, DSL.name("address_types_id_key"), new TableField[] { AddressType.ADDRESS_TYPE.ADDRESS_TYPE_ID }, true);
    public static final UniqueKey<ClientRecord> CLIENT_ID_KEY = Internal.createUniqueKey(Client.CLIENT, DSL.name("client_id_key"), new TableField[] { Client.CLIENT.CLIENT_ID }, true);
    public static final UniqueKey<CountyRecord> COUNTY_ID_KEY = Internal.createUniqueKey(County.COUNTY, DSL.name("county_id_key"), new TableField[] { County.COUNTY.COUNTY_ID }, true);
    public static final UniqueKey<FollowupsRecord> FOLLOWUPS_FOLLOWUP_ID_KEY = Internal.createUniqueKey(Followups.FOLLOWUPS, DSL.name("followups_followup_id_key"), new TableField[] { Followups.FOLLOWUPS.FOLLOWUP_ID }, true);
    public static final UniqueKey<PhoneNumberRecord> PHONE_NUMBERS_PHONE_NUMBER_ID_KEY = Internal.createUniqueKey(PhoneNumber.PHONE_NUMBER, DSL.name("phone_numbers_phone_number_id_key"), new TableField[] { PhoneNumber.PHONE_NUMBER.PHONE_NUMBER_ID }, true);
    public static final UniqueKey<PhoneNumberTypeRecord> PHONE_NUMBER_TYPES_ID_KEY = Internal.createUniqueKey(PhoneNumberType.PHONE_NUMBER_TYPE, DSL.name("phone_number_types_id_key"), new TableField[] { PhoneNumberType.PHONE_NUMBER_TYPE.NUMBER_TYPE_ID }, true);
    public static final UniqueKey<PreferredContactRecord> PREFERRED_CONTACT_ID_KEY = Internal.createUniqueKey(PreferredContact.PREFERRED_CONTACT, DSL.name("preferred_contact_id_key"), new TableField[] { PreferredContact.PREFERRED_CONTACT.PREFERRED_CONTACT_ID }, true);
    public static final UniqueKey<ServiceRecord> SERVICES_SERVICE_ID_KEY = Internal.createUniqueKey(Service.SERVICE, DSL.name("services_service_id_key"), new TableField[] { Service.SERVICE.SERVICE_ID }, true);
    public static final UniqueKey<ServiceRecord> SERVICES_SERVICE_NAME_KEY = Internal.createUniqueKey(Service.SERVICE, DSL.name("services_service_name_key"), new TableField[] { Service.SERVICE.SERVICE_NAME }, true);
    public static final UniqueKey<StaffRecord> STAFF_STAFF_ID_KEY = Internal.createUniqueKey(Staff.STAFF, DSL.name("staff_staff_id_key"), new TableField[] { Staff.STAFF.STAFF_ID }, true);
    public static final UniqueKey<StatusRecord> STATUSES_STATUS_ID_KEY = Internal.createUniqueKey(Status.STATUS, DSL.name("statuses_status_id_key"), new TableField[] { Status.STATUS.STATUS_ID }, true);
    public static final UniqueKey<TicketRecord> TICKET_TICKET_ID_KEY = Internal.createUniqueKey(Ticket.TICKET, DSL.name("ticket_ticket_id_key"), new TableField[] { Ticket.TICKET.TICKET_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, AddressTypeRecord> ADDRESS__ADDRESSES_ADDRESS_TYPE_ID_FKEY = Internal.createForeignKey(Address.ADDRESS, DSL.name("addresses_address_type_id_fkey"), new TableField[] { Address.ADDRESS.ADDRESS_TYPE_ID }, Keys.ADDRESS_TYPES_ID_KEY, new TableField[] { AddressType.ADDRESS_TYPE.ADDRESS_TYPE_ID }, true);
    public static final ForeignKey<ClientRecord, CountyRecord> CLIENT__FK_CLIENT_COUNTY = Internal.createForeignKey(Client.CLIENT, DSL.name("fk_client_county"), new TableField[] { Client.CLIENT.COUNTY_ID }, Keys.COUNTY_ID_KEY, new TableField[] { County.COUNTY.COUNTY_ID }, true);
    public static final ForeignKey<ClientRecord, PreferredContactRecord> CLIENT__FK_CLIENT_PREFERRED_CONTACT = Internal.createForeignKey(Client.CLIENT, DSL.name("fk_client_preferred_contact"), new TableField[] { Client.CLIENT.PREFERRED_CONTACT_ID }, Keys.PREFERRED_CONTACT_ID_KEY, new TableField[] { PreferredContact.PREFERRED_CONTACT.PREFERRED_CONTACT_ID }, true);
    public static final ForeignKey<FollowupsRecord, TicketRecord> FOLLOWUPS__FOLLOWUPS_TICKET_ID_FKEY = Internal.createForeignKey(Followups.FOLLOWUPS, DSL.name("followups_ticket_id_fkey"), new TableField[] { Followups.FOLLOWUPS.TICKET_ID }, Keys.TICKET_TICKET_ID_KEY, new TableField[] { Ticket.TICKET.TICKET_ID }, true);
    public static final ForeignKey<PhoneNumberRecord, PhoneNumberTypeRecord> PHONE_NUMBER__PHONE_NUMBERS_NUMBER_TYPE_ID_FKEY = Internal.createForeignKey(PhoneNumber.PHONE_NUMBER, DSL.name("phone_numbers_number_type_id_fkey"), new TableField[] { PhoneNumber.PHONE_NUMBER.NUMBER_TYPE_ID }, Keys.PHONE_NUMBER_TYPES_ID_KEY, new TableField[] { PhoneNumberType.PHONE_NUMBER_TYPE.NUMBER_TYPE_ID }, true);
    public static final ForeignKey<StaffRecord, ServiceRecord> STAFF__STAFF_SERVICE_ID_FKEY = Internal.createForeignKey(Staff.STAFF, DSL.name("staff_service_id_fkey"), new TableField[] { Staff.STAFF.SERVICE_ID }, Keys.SERVICES_SERVICE_ID_KEY, new TableField[] { Service.SERVICE.SERVICE_ID }, true);
    public static final ForeignKey<TicketRecord, ClientRecord> TICKET__TICKET_CLIENT_ID_FKEY = Internal.createForeignKey(Ticket.TICKET, DSL.name("ticket_client_id_fkey"), new TableField[] { Ticket.TICKET.CLIENT_ID }, Keys.CLIENT_ID_KEY, new TableField[] { Client.CLIENT.CLIENT_ID }, true);
    public static final ForeignKey<TicketRecord, StaffRecord> TICKET__TICKET_CREATOR_OF_TICKET_FKEY = Internal.createForeignKey(Ticket.TICKET, DSL.name("ticket_creator_of_ticket_fkey"), new TableField[] { Ticket.TICKET.CREATOR_OF_TICKET }, Keys.STAFF_STAFF_ID_KEY, new TableField[] { Staff.STAFF.STAFF_ID }, true);
    public static final ForeignKey<TicketRecord, ServiceRecord> TICKET__TICKET_SERVICE_TYPE_ID_FKEY = Internal.createForeignKey(Ticket.TICKET, DSL.name("ticket_service_type_id_fkey"), new TableField[] { Ticket.TICKET.SERVICE_TYPE_ID }, Keys.SERVICES_SERVICE_ID_KEY, new TableField[] { Service.SERVICE.SERVICE_ID }, true);
    public static final ForeignKey<TicketRecord, StatusRecord> TICKET__TICKET_STATUS_ID_FKEY = Internal.createForeignKey(Ticket.TICKET, DSL.name("ticket_status_id_fkey"), new TableField[] { Ticket.TICKET.STATUS_ID }, Keys.STATUSES_STATUS_ID_KEY, new TableField[] { Status.STATUS.STATUS_ID }, true);
}
